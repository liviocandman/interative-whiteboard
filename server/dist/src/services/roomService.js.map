{"version":3,"sources":["../../../src/services/roomService.ts"],"sourcesContent":["import { pubClient } from \"../config/redis\";\r\n\r\nconst DEFAULT_TTL_SECONDS = 3600;\r\n\r\nfunction isRedisOpen(client: typeof pubClient) {\r\n  return !!client && (client as any).isOpen === true;\r\n}\r\n\r\n/**\r\n * Cria metadado da sala (chave string) com TTL para indicar existência.\r\n * Não manipula o set de usuários diretamente — o set é criado quando um usuário entra (SADD).\r\n */\r\nexport async function createRoom(roomId: string, ttlSeconds = DEFAULT_TTL_SECONDS): Promise<void> {\r\n  if (!roomId) throw new Error(\"createRoom: roomId inválido\");\r\n  if (!isRedisOpen(pubClient)) return;\r\n\r\n  const metaKey = `room:${roomId}:meta`;\r\n  // cria uma chave string com TTL; evita criar set com placeholder\r\n  await pubClient.set(metaKey, \"1\", { EX: ttlSeconds });\r\n}\r\n/**\r\n * Adiciona usuário ao set de usuários da sala e retorna o novo count.\r\n */\r\nexport async function addUserToRoom(roomId: string, userId: string): Promise<number> {\r\n  if (!roomId) throw new Error(\"addUserToRoom: roomId inválido\");\r\n  if (!userId) throw new Error(\"addUserToRoom: userId inválido\");\r\n\r\n  const usersKey = `room:${roomId}:users`;\r\n  await pubClient.sAdd(usersKey, userId);\r\n  const count = await pubClient.sCard(usersKey);\r\n  return typeof count === \"number\" ? count : Number(count);\r\n}\r\n\r\n/**\r\n * Remove o usuário do set e retorna o novo count (0 se não existir).\r\n */\r\nexport async function removeUserFromRoom(roomId: string, userId: string): Promise<number> {\r\n  if (!roomId) throw new Error(\"removeUserFromRoom: roomId inválido\");\r\n  if (!userId) throw new Error(\"removeUserFromRoom: userId inválido\");\r\n\r\n  const usersKey = `room:${roomId}:users`;\r\n  await pubClient.sRem(usersKey, userId);\r\n  const count = await pubClient.sCard(usersKey);\r\n  return typeof count === \"number\" ? count : Number(count);\r\n}\r\n\r\n/**\r\n * Apaga todos os keys relacionados à sala (users set, state e meta).\r\n */\r\nexport async function deleteRoom(roomId: string): Promise<void> {\r\n  if (!roomId) throw new Error(\"deleteRoom: roomId inválido\");\r\n  if (!isRedisOpen(pubClient)) return;\r\n\r\n  const keys = [\r\n    `room:${roomId}:users`,\r\n    `room:${roomId}:state`,\r\n    `room:${roomId}:meta`,\r\n  ];\r\n  \r\n  for (const key of keys) {\r\n    await pubClient.del(key);\r\n  }\r\n}\r\n\r\n/**\r\n * Retorna o número de usuários na sala (sempre number; 0 se key não existir).\r\n */\r\nexport async function getRoomUsersCount(roomId: string): Promise<number> {\r\n  if (!roomId) throw new Error(\"getRoomUsersCount: roomId inválido\");\r\n  const usersKey = `room:${roomId}:users`;\r\n  const count = await pubClient.sCard(usersKey);\r\n  return typeof count === \"number\" ? count : Number(count);\r\n}\r\n"],"names":["addUserToRoom","createRoom","deleteRoom","getRoomUsersCount","removeUserFromRoom","DEFAULT_TTL_SECONDS","isRedisOpen","client","isOpen","roomId","ttlSeconds","Error","pubClient","metaKey","set","EX","userId","usersKey","sAdd","count","sCard","Number","sRem","keys","key","del"],"mappings":";;;;;;;;;;;QAuBsBA;eAAAA;;QAXAC;eAAAA;;QAqCAC;eAAAA;;QAkBAC;eAAAA;;QA/BAC;eAAAA;;;uBApCI;AAE1B,MAAMC,sBAAsB;AAE5B,SAASC,YAAYC,MAAwB;IAC3C,OAAO,CAAC,CAACA,UAAU,AAACA,OAAeC,MAAM,KAAK;AAChD;AAMO,eAAeP,WAAWQ,MAAc,EAAEC,aAAaL,mBAAmB;IAC/E,IAAI,CAACI,QAAQ,MAAM,IAAIE,MAAM;IAC7B,IAAI,CAACL,YAAYM,gBAAS,GAAG;IAE7B,MAAMC,UAAU,CAAC,KAAK,EAAEJ,OAAO,KAAK,CAAC;IACrC,iEAAiE;IACjE,MAAMG,gBAAS,CAACE,GAAG,CAACD,SAAS,KAAK;QAAEE,IAAIL;IAAW;AACrD;AAIO,eAAeV,cAAcS,MAAc,EAAEO,MAAc;IAChE,IAAI,CAACP,QAAQ,MAAM,IAAIE,MAAM;IAC7B,IAAI,CAACK,QAAQ,MAAM,IAAIL,MAAM;IAE7B,MAAMM,WAAW,CAAC,KAAK,EAAER,OAAO,MAAM,CAAC;IACvC,MAAMG,gBAAS,CAACM,IAAI,CAACD,UAAUD;IAC/B,MAAMG,QAAQ,MAAMP,gBAAS,CAACQ,KAAK,CAACH;IACpC,OAAO,OAAOE,UAAU,WAAWA,QAAQE,OAAOF;AACpD;AAKO,eAAef,mBAAmBK,MAAc,EAAEO,MAAc;IACrE,IAAI,CAACP,QAAQ,MAAM,IAAIE,MAAM;IAC7B,IAAI,CAACK,QAAQ,MAAM,IAAIL,MAAM;IAE7B,MAAMM,WAAW,CAAC,KAAK,EAAER,OAAO,MAAM,CAAC;IACvC,MAAMG,gBAAS,CAACU,IAAI,CAACL,UAAUD;IAC/B,MAAMG,QAAQ,MAAMP,gBAAS,CAACQ,KAAK,CAACH;IACpC,OAAO,OAAOE,UAAU,WAAWA,QAAQE,OAAOF;AACpD;AAKO,eAAejB,WAAWO,MAAc;IAC7C,IAAI,CAACA,QAAQ,MAAM,IAAIE,MAAM;IAC7B,IAAI,CAACL,YAAYM,gBAAS,GAAG;IAE7B,MAAMW,OAAO;QACX,CAAC,KAAK,EAAEd,OAAO,MAAM,CAAC;QACtB,CAAC,KAAK,EAAEA,OAAO,MAAM,CAAC;QACtB,CAAC,KAAK,EAAEA,OAAO,KAAK,CAAC;KACtB;IAED,KAAK,MAAMe,OAAOD,KAAM;QACtB,MAAMX,gBAAS,CAACa,GAAG,CAACD;IACtB;AACF;AAKO,eAAerB,kBAAkBM,MAAc;IACpD,IAAI,CAACA,QAAQ,MAAM,IAAIE,MAAM;IAC7B,MAAMM,WAAW,CAAC,KAAK,EAAER,OAAO,MAAM,CAAC;IACvC,MAAMU,QAAQ,MAAMP,gBAAS,CAACQ,KAAK,CAACH;IACpC,OAAO,OAAOE,UAAU,WAAWA,QAAQE,OAAOF;AACpD"}