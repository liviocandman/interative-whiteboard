{"version":3,"sources":["../../../src/socket/setupSocket.ts"],"sourcesContent":["import { Server } from \"socket.io\";\r\nimport { pubClient, subClient } from \"../config/redis\";\r\nimport { addUserToRoom, removeUserFromRoom, deleteRoom } from \"../services/roomService\";\r\nimport { saveCanvasState, getCanvasState, deleteCanvasState } from \"../services/stateService\";\r\n\r\nexport async function setupSocket(io: Server) {\r\n\r\n  await subClient.pSubscribe(\"room:*\", (message, channel) => {\r\n    const [, roomId] = channel.split(\":\");\r\n    io.to(roomId).emit(\"drawing\", JSON.parse(message));\r\n  });\r\n\r\n  io.on(\"connection\", (socket) => {\r\n    console.log(\"Socket connect:\", socket.id);\r\n    let joinedRoom: string | null = null;\r\n\r\n    socket.on(\"joinRoom\", async (roomId: string) => {\r\n      joinedRoom = roomId;\r\n      socket.join(roomId);\r\n      await addUserToRoom(roomId, socket.id);\r\n\r\n      const state = await getCanvasState(roomId);\r\n      socket.emit(\"initialState\", state);\r\n    });\r\n\r\n\r\n    socket.on(\"drawing\", async (stroke: any) => {\r\n      if (!joinedRoom) return;\r\n      socket.emit(\"drawing\", stroke);\r\n      await pubClient.publish(`room:${joinedRoom}`, JSON.stringify(stroke));\r\n    });\r\n\r\n    \r\n    socket.on(\"saveState\", async (canvasState) => {\r\n      if (!joinedRoom) return;\r\n      await saveCanvasState(joinedRoom, canvasState);\r\n    });\r\n\r\n    socket.on(\"leaveRoom\", async () => {\r\n      if (!joinedRoom) return;\r\n      await removeUserFromRoom(joinedRoom, socket.id);\r\n      await deleteCanvasState(joinedRoom);\r\n      socket.leave(joinedRoom);\r\n      joinedRoom = null;\r\n    });\r\n        \r\n    socket.on(\"disconnecting\", async () => {\r\n      for (const roomId of socket.rooms) {\r\n        if (roomId !== socket.id) {\r\n          await removeUserFromRoom(roomId, socket.id);\r\n          await deleteRoom(roomId);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}"],"names":["setupSocket","io","subClient","pSubscribe","message","channel","roomId","split","to","emit","JSON","parse","on","socket","console","log","id","joinedRoom","join","addUserToRoom","state","getCanvasState","stroke","pubClient","publish","stringify","canvasState","saveCanvasState","removeUserFromRoom","deleteCanvasState","leave","rooms","deleteRoom"],"mappings":";;;;+BAKsBA;;;eAAAA;;;uBAJe;6BACyB;8BACK;AAE5D,eAAeA,YAAYC,EAAU;IAE1C,MAAMC,gBAAS,CAACC,UAAU,CAAC,UAAU,CAACC,SAASC;QAC7C,MAAM,GAAGC,OAAO,GAAGD,QAAQE,KAAK,CAAC;QACjCN,GAAGO,EAAE,CAACF,QAAQG,IAAI,CAAC,WAAWC,KAAKC,KAAK,CAACP;IAC3C;IAEAH,GAAGW,EAAE,CAAC,cAAc,CAACC;QACnBC,QAAQC,GAAG,CAAC,mBAAmBF,OAAOG,EAAE;QACxC,IAAIC,aAA4B;QAEhCJ,OAAOD,EAAE,CAAC,YAAY,OAAON;YAC3BW,aAAaX;YACbO,OAAOK,IAAI,CAACZ;YACZ,MAAMa,IAAAA,0BAAa,EAACb,QAAQO,OAAOG,EAAE;YAErC,MAAMI,QAAQ,MAAMC,IAAAA,4BAAc,EAACf;YACnCO,OAAOJ,IAAI,CAAC,gBAAgBW;QAC9B;QAGAP,OAAOD,EAAE,CAAC,WAAW,OAAOU;YAC1B,IAAI,CAACL,YAAY;YACjBJ,OAAOJ,IAAI,CAAC,WAAWa;YACvB,MAAMC,gBAAS,CAACC,OAAO,CAAC,CAAC,KAAK,EAAEP,YAAY,EAAEP,KAAKe,SAAS,CAACH;QAC/D;QAGAT,OAAOD,EAAE,CAAC,aAAa,OAAOc;YAC5B,IAAI,CAACT,YAAY;YACjB,MAAMU,IAAAA,6BAAe,EAACV,YAAYS;QACpC;QAEAb,OAAOD,EAAE,CAAC,aAAa;YACrB,IAAI,CAACK,YAAY;YACjB,MAAMW,IAAAA,+BAAkB,EAACX,YAAYJ,OAAOG,EAAE;YAC9C,MAAMa,IAAAA,+BAAiB,EAACZ;YACxBJ,OAAOiB,KAAK,CAACb;YACbA,aAAa;QACf;QAEAJ,OAAOD,EAAE,CAAC,iBAAiB;YACzB,KAAK,MAAMN,UAAUO,OAAOkB,KAAK,CAAE;gBACjC,IAAIzB,WAAWO,OAAOG,EAAE,EAAE;oBACxB,MAAMY,IAAAA,+BAAkB,EAACtB,QAAQO,OAAOG,EAAE;oBAC1C,MAAMgB,IAAAA,uBAAU,EAAC1B;gBACnB;YACF;QACF;IACF;AACF"}