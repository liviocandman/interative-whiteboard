{"version":3,"sources":["../../../src/socket/setupSocket.ts"],"sourcesContent":["import { Server } from \"socket.io\";\r\nimport { pubClient, subClient } from \"../config/redis\";\r\nimport {\r\n  saveCanvasState,\r\n  getCanvasState,\r\n  deleteCanvasState,\r\n} from \"../services/stateService\";\r\nimport {\r\n  addUserToRoom,\r\n  removeUserFromRoom,\r\n  deleteRoom,\r\n} from \"../services/roomService\";\r\nimport {\r\n  Stroke,\r\n  getRoomStrokes,\r\n  publishStroke,\r\n  deleteRoomStrokes,\r\n} from \"../services/strokeService\";\r\n\r\nconst REDIS_ROOM_PREFIX = \"room:\";\r\n\r\nexport async function setupSocket(io: Server) {\r\n  // Subscriber global para strokes de outras instÃ¢ncias\r\n  try {\r\n    await subClient.pSubscribe(`${REDIS_ROOM_PREFIX}*`, (rawMessage, channel) => {\r\n      try {\r\n        const roomId = channel.substring(REDIS_ROOM_PREFIX.length);\r\n        if (!roomId) return;\r\n\r\n        const { stroke, origin }: { stroke: Stroke; origin?: string } = JSON.parse(rawMessage);\r\n        io.in(roomId).except(origin ?? []).emit(\"drawing\", stroke);\r\n      } catch (err) {\r\n        console.error(\"Redis pSubscribe handler error:\", err);\r\n      }\r\n    });\r\n    console.log(\"ðŸ”” Redis pSubscribe registrado em pattern 'room:*'\");\r\n  } catch (err) {\r\n    console.error(\"Falha ao registrar pSubscribe no Redis:\", err);\r\n  }\r\n\r\n  // Cancela inscriÃ§Ã£o no Redis ao encerrar processo\r\n  process.once(\"SIGINT\", async () => {\r\n    try {\r\n      await subClient.pUnsubscribe(`${REDIS_ROOM_PREFIX}*`);\r\n      console.log(\"ðŸ”• Redis pUnsubscribe executado\");\r\n      process.exit(0);\r\n    } catch {\r\n      process.exit(1);\r\n    }\r\n  });\r\n\r\n  // Limpa estado, metadados e strokes quando sala fica vazia\r\n  async function cleanupRoomWhenEmpty(roomId: string, count: number) {\r\n    if (count !== 0) {\r\n      console.log(`Sala ${roomId} com ${count} usuÃ¡rio(s) â€” mantida`);\r\n      return;\r\n    }\r\n    console.log(`ðŸ§¹ Sala ${roomId} vazia â€” apagando estado e removendo sala`);\r\n    await Promise.all([\r\n      deleteCanvasState(roomId),\r\n      deleteRoom(roomId),\r\n      deleteRoomStrokes(roomId),\r\n    ]).catch((err) => console.error(\"Erro no cleanup:\", err));\r\n  }\r\n\r\n  io.on(\"connection\", (socket) => {\r\n    console.log(`ðŸŸ¢ Socket conectado: ${socket.id}`);\r\n    let joinedRoom: string | null = null;\r\n\r\n    socket.on(\"joinRoom\", async (roomId: string, ack?: (err?: string) => void) => {\r\n      if (!roomId) {\r\n        ack?.(\"roomId invÃ¡lido\");\r\n        return;\r\n      }\r\n\r\n      // Sai da sala anterior se necessÃ¡rio\r\n      if (joinedRoom && joinedRoom !== roomId) {\r\n        try {\r\n          const prevCount = await removeUserFromRoom(joinedRoom, socket.id);\r\n          socket.leave(joinedRoom);\r\n          await cleanupRoomWhenEmpty(joinedRoom, prevCount);\r\n        } catch (err) {\r\n          console.error(\"Erro ao sair de sala anterior:\", err);\r\n        } finally {\r\n          joinedRoom = null;\r\n        }\r\n      }\r\n\r\n      // Registra no serviÃ§o e entra na sala\r\n      try {\r\n        const newCount = await addUserToRoom(roomId, socket.id);\r\n        socket.join(roomId);\r\n        joinedRoom = roomId;\r\n        console.log(`ðŸ“Œ ${socket.id} entrou na sala ${roomId} (${newCount} usuÃ¡rios)`);\r\n      } catch (err: any) {\r\n        console.error(\"Falha addUserToRoom:\", err);\r\n        ack?.(err.message || \"Erro ao registrar usuÃ¡rio\");\r\n        return;\r\n      }\r\n\r\n      // Envia estado inicial consolidado\r\n      try {\r\n        const [snapshot, strokes] = await Promise.all([\r\n          getCanvasState(roomId),\r\n          getRoomStrokes(roomId),\r\n        ]);\r\n        socket.emit(\"initialState\", {\r\n          snapshot: snapshot ?? null,\r\n          strokes,\r\n        });\r\n        ack?.();\r\n      } catch (err: any) {\r\n        console.error(\"Falha ao recuperar estado inicial:\", err);\r\n        socket.emit(\"initialState\", { snapshot: null, strokes: [] });\r\n        ack?.(err.message || \"Falha ao recuperar estado inicial\");\r\n      }\r\n    });\r\n\r\n    socket.on(\"drawing\", async (stroke: Stroke) => {\r\n      if (!joinedRoom) return;\r\n      try {\r\n        await publishStroke(joinedRoom, { ...stroke }, socket.id);\r\n      } catch (err) {\r\n        console.error(\"Erro ao publicar stroke:\", err);\r\n        socket.emit(\"error\", { event: \"drawing\", message: (err as Error).message });\r\n      }\r\n    });\r\n\r\n    socket.on(\"saveState\", async (canvasState: string, ack?: (err?: string) => void) => {\r\n      if (!joinedRoom) {\r\n        ack?.(\"sem sala\");\r\n        return;\r\n      }\r\n      try {\r\n        await saveCanvasState(joinedRoom, canvasState);\r\n        ack?.();\r\n      } catch (err: any) {\r\n        console.error(\"Erro saveCanvasState:\", err);\r\n        ack?.(err.message || \"Falha ao salvar estado\");\r\n      }\r\n    });\r\n\r\n    socket.on(\"leaveRoom\", async (roomId?: string, ack?: (err?: string) => void) => {\r\n      const target = roomId ?? joinedRoom;\r\n      if (!target) {\r\n        ack?.(\"nÃ£o estÃ¡ em sala\");\r\n        return;\r\n      }\r\n      try {\r\n        const newCount = await removeUserFromRoom(target, socket.id);\r\n        socket.leave(target);\r\n        if (joinedRoom === target) joinedRoom = null;\r\n        console.log(`ðŸšª ${socket.id} saiu da sala ${target} (${newCount} usuÃ¡rios)`);\r\n        await cleanupRoomWhenEmpty(target, newCount);\r\n        ack?.();\r\n      } catch (err: any) {\r\n        console.error(\"Erro leaveRoom:\", err);\r\n        ack?.(err.message || \"Falha ao sair da sala\");\r\n      }\r\n    });\r\n\r\n    socket.on(\"disconnect\", async (reason) => {\r\n      if (!joinedRoom) {\r\n        console.log(`ðŸ”´ ${socket.id} desconectou (sem sala) â€” razÃ£o: ${reason}`);\r\n        return;\r\n      }\r\n      const roomToClean = joinedRoom;\r\n      joinedRoom = null;\r\n      try {\r\n        const newCount = await removeUserFromRoom(roomToClean, socket.id);\r\n        socket.leave(roomToClean);\r\n        console.log(`ðŸ”´ ${socket.id} desconectou de ${roomToClean} (${newCount} usuÃ¡rios)`);\r\n        await cleanupRoomWhenEmpty(roomToClean, newCount);\r\n      } catch (err) {\r\n        console.error(\"Erro no handler disconnect:\", err);\r\n      }\r\n    });\r\n  });\r\n}\r\n"],"names":["setupSocket","REDIS_ROOM_PREFIX","io","subClient","pSubscribe","rawMessage","channel","roomId","substring","length","stroke","origin","JSON","parse","in","except","emit","err","console","error","log","process","once","pUnsubscribe","exit","cleanupRoomWhenEmpty","count","Promise","all","deleteCanvasState","deleteRoom","deleteRoomStrokes","catch","on","socket","id","joinedRoom","ack","prevCount","removeUserFromRoom","leave","newCount","addUserToRoom","join","message","snapshot","strokes","getCanvasState","getRoomStrokes","publishStroke","event","canvasState","saveCanvasState","target","reason","roomToClean"],"mappings":"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"}