{"version":3,"sources":["../../../src/tests/socketRooms.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from \"vitest\";\r\nimport { io as Client, Socket } from \"socket.io-client\";\r\nimport { createServer } from \"http\";\r\nimport express from \"express\";\r\nimport { Server } from \"socket.io\";\r\nimport { initRedis, pubClient, subClient } from \"../config/redis\";\r\nimport { setupSocket } from \"../socket/setupSocket\";\r\n\r\n// Use porta 0 para evitar conflitos\r\nconst PORT = 0;\r\nlet io: Server;\r\nlet httpServer: ReturnType<typeof createServer>;\r\nlet realPort: number;\r\n\r\ndescribe(\"Test multiple users in different rooms\", () => {\r\n  let clientA: Socket | undefined;\r\n  let clientB: Socket | undefined;\r\n\r\n  beforeAll(async () => {\r\n    await initRedis();\r\n\r\n    const app = express();\r\n    httpServer = createServer(app);\r\n    io = new Server(httpServer, { cors: { origin: \"*\" } });\r\n\r\n    await setupSocket(io);\r\n\r\n    await new Promise<void>((resolve) => {\r\n      httpServer.listen(PORT, () => {\r\n        // @ts-ignore\r\n        realPort = httpServer.address().port;\r\n        clientA = Client(`http://localhost:${realPort}`);\r\n        clientB = Client(`http://localhost:${realPort}`);\r\n        resolve();\r\n      });\r\n    });\r\n  }, 20000); // timeout maior\r\n\r\n  afterAll(async () => {\r\n    if (clientA) clientA.disconnect();\r\n    if (clientB) clientB.disconnect();\r\n    if (io) io.close();\r\n    if (httpServer) httpServer.close();\r\n\r\n    await pubClient.quit();\r\n    await subClient.quit();\r\n  });\r\n\r\n  it(\"User A and B join different rooms and do not receive cross events\", async () => {\r\n    const roomA = \"room-1\";\r\n    const roomB = \"room-2\";\r\n\r\n    let receivedA = false;\r\n    let receivedB = false;\r\n\r\n    clientA!.emit(\"joinRoom\", roomA);\r\n    clientB!.emit(\"joinRoom\", roomB);\r\n\r\n    clientA!.on(\"drawing\", () => {\r\n      receivedA = true;\r\n    });\r\n\r\n    clientB!.on(\"drawing\", () => {\r\n      receivedB = true;\r\n    });\r\n\r\n    // User A sends a drawing event\r\n    clientA!.emit(\"drawing\", { x: 10, y: 20 });\r\n\r\n    // Aguarde um pouco para os eventos propagarem\r\n    await new Promise((res) => setTimeout(res, 400));\r\n\r\n    expect(receivedA).toBe(true);  // A should receive its own event\r\n    expect(receivedB).toBe(false); // B should not receive A's event\r\n  });\r\n});"],"names":["PORT","io","httpServer","realPort","describe","clientA","clientB","beforeAll","initRedis","app","express","createServer","Server","cors","origin","setupSocket","Promise","resolve","listen","address","port","Client","afterAll","disconnect","close","pubClient","quit","subClient","it","roomA","roomB","receivedA","receivedB","emit","on","x","y","res","setTimeout","expect","toBe"],"mappings":";;;;wBAA0D;gCACrB;sBACR;gEACT;0BACG;uBACyB;6BACpB;;;;;;AAE5B,oCAAoC;AACpC,MAAMA,OAAO;AACb,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAEJC,IAAAA,gBAAQ,EAAC,0CAA0C;IACjD,IAAIC;IACJ,IAAIC;IAEJC,IAAAA,iBAAS,EAAC;QACR,MAAMC,IAAAA,gBAAS;QAEf,MAAMC,MAAMC,IAAAA,gBAAO;QACnBR,aAAaS,IAAAA,kBAAY,EAACF;QAC1BR,KAAK,IAAIW,gBAAM,CAACV,YAAY;YAAEW,MAAM;gBAAEC,QAAQ;YAAI;QAAE;QAEpD,MAAMC,IAAAA,wBAAW,EAACd;QAElB,MAAM,IAAIe,QAAc,CAACC;YACvBf,WAAWgB,MAAM,CAAClB,MAAM;gBACtB,aAAa;gBACbG,WAAWD,WAAWiB,OAAO,GAAGC,IAAI;gBACpCf,UAAUgB,IAAAA,kBAAM,EAAC,CAAC,iBAAiB,EAAElB,UAAU;gBAC/CG,UAAUe,IAAAA,kBAAM,EAAC,CAAC,iBAAiB,EAAElB,UAAU;gBAC/Cc;YACF;QACF;IACF,GAAG,QAAQ,gBAAgB;IAE3BK,IAAAA,gBAAQ,EAAC;QACP,IAAIjB,SAASA,QAAQkB,UAAU;QAC/B,IAAIjB,SAASA,QAAQiB,UAAU;QAC/B,IAAItB,IAAIA,GAAGuB,KAAK;QAChB,IAAItB,YAAYA,WAAWsB,KAAK;QAEhC,MAAMC,gBAAS,CAACC,IAAI;QACpB,MAAMC,gBAAS,CAACD,IAAI;IACtB;IAEAE,IAAAA,UAAE,EAAC,qEAAqE;QACtE,MAAMC,QAAQ;QACd,MAAMC,QAAQ;QAEd,IAAIC,YAAY;QAChB,IAAIC,YAAY;QAEhB3B,QAAS4B,IAAI,CAAC,YAAYJ;QAC1BvB,QAAS2B,IAAI,CAAC,YAAYH;QAE1BzB,QAAS6B,EAAE,CAAC,WAAW;YACrBH,YAAY;QACd;QAEAzB,QAAS4B,EAAE,CAAC,WAAW;YACrBF,YAAY;QACd;QAEA,+BAA+B;QAC/B3B,QAAS4B,IAAI,CAAC,WAAW;YAAEE,GAAG;YAAIC,GAAG;QAAG;QAExC,8CAA8C;QAC9C,MAAM,IAAIpB,QAAQ,CAACqB,MAAQC,WAAWD,KAAK;QAE3CE,IAAAA,cAAM,EAACR,WAAWS,IAAI,CAAC,OAAQ,iCAAiC;QAChED,IAAAA,cAAM,EAACP,WAAWQ,IAAI,CAAC,QAAQ,iCAAiC;IAClE;AACF"}